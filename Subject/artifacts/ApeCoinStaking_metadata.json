{
	"compiler": {
		"version": "0.8.10+commit.fc410830"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_apeCoinContractAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_baycContractAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_maycContractAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_bakcContractAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "BAKCAlreadyPaired",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "BAKCNotOwnedOrPaired",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CallerNotOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DepositMoreThanOneAPE",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EndNotWholeHour",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExceededCapAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExceededStakedAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidPoolId",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MainTokenNotOwnedOrPaired",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NeitherTokenInPairOwnedByCaller",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotOwnerOfBAKC",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotOwnerOfMain",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ProvidedTokensNotPaired",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "SplitPairCantPartiallyWithdraw",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "StartMustBeGreaterThanEnd",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "StartMustEqualLastEnd",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "StartNotWholeHour",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "UncommitWrongParameters",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "ClaimRewards",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ClaimRewardsNft",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "mainTypePoolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "mainTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "bakcTokenId",
						"type": "uint256"
					}
				],
				"name": "ClaimRewardsPairNft",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "DepositNft",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "mainTypePoolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "mainTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "bakcTokenId",
						"type": "uint256"
					}
				],
				"name": "DepositPairNft",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "lastRewardedBlock",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stakedAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "accumulatedRewardsPerShare",
						"type": "uint256"
					}
				],
				"name": "UpdatePool",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "WithdrawNft",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "mainTypePoolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "mainTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "bakcTokenId",
						"type": "uint256"
					}
				],
				"name": "WithdrawPairNft",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_startTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_endTimeStamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_capPerPosition",
						"type": "uint256"
					}
				],
				"name": "addTimeRange",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "addressPosition",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "stakedAmount",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "rewardsDebt",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "apeCoin",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "bakcToMain",
				"outputs": [
					{
						"internalType": "uint248",
						"name": "tokenId",
						"type": "uint248"
					},
					{
						"internalType": "bool",
						"name": "isPaired",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "claimApeCoin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint128",
								"name": "mainTokenId",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "bakcTokenId",
								"type": "uint128"
							}
						],
						"internalType": "struct ApeCoinStaking.PairNft[]",
						"name": "_baycPairs",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "uint128",
								"name": "mainTokenId",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "bakcTokenId",
								"type": "uint128"
							}
						],
						"internalType": "struct ApeCoinStaking.PairNft[]",
						"name": "_maycPairs",
						"type": "tuple[]"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "claimBAKC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_nfts",
						"type": "uint256[]"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "claimBAYC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_nfts",
						"type": "uint256[]"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "claimMAYC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimSelfApeCoin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint128",
								"name": "mainTokenId",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "bakcTokenId",
								"type": "uint128"
							}
						],
						"internalType": "struct ApeCoinStaking.PairNft[]",
						"name": "_baycPairs",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "uint128",
								"name": "mainTokenId",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "bakcTokenId",
								"type": "uint128"
							}
						],
						"internalType": "struct ApeCoinStaking.PairNft[]",
						"name": "_maycPairs",
						"type": "tuple[]"
					}
				],
				"name": "claimSelfBAKC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_nfts",
						"type": "uint256[]"
					}
				],
				"name": "claimSelfBAYC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_nfts",
						"type": "uint256[]"
					}
				],
				"name": "claimSelfMAYC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "depositApeCoin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "mainTokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "bakcTokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint184",
								"name": "amount",
								"type": "uint184"
							}
						],
						"internalType": "struct ApeCoinStaking.PairNftDepositWithAmount[]",
						"name": "_baycPairs",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "mainTokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "bakcTokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint184",
								"name": "amount",
								"type": "uint184"
							}
						],
						"internalType": "struct ApeCoinStaking.PairNftDepositWithAmount[]",
						"name": "_maycPairs",
						"type": "tuple[]"
					}
				],
				"name": "depositBAKC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "tokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint224",
								"name": "amount",
								"type": "uint224"
							}
						],
						"internalType": "struct ApeCoinStaking.SingleNft[]",
						"name": "_nfts",
						"type": "tuple[]"
					}
				],
				"name": "depositBAYC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "tokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint224",
								"name": "amount",
								"type": "uint224"
							}
						],
						"internalType": "struct ApeCoinStaking.SingleNft[]",
						"name": "_nfts",
						"type": "tuple[]"
					}
				],
				"name": "depositMAYC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "depositSelfApeCoin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "getAllStakes",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "poolId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deposited",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unclaimed",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "rewards24hr",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "mainTokenId",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "mainTypePoolId",
										"type": "uint256"
									}
								],
								"internalType": "struct ApeCoinStaking.DashboardPair",
								"name": "pair",
								"type": "tuple"
							}
						],
						"internalType": "struct ApeCoinStaking.DashboardStake[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "getApeCoinStake",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "poolId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deposited",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unclaimed",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "rewards24hr",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "mainTokenId",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "mainTypePoolId",
										"type": "uint256"
									}
								],
								"internalType": "struct ApeCoinStaking.DashboardPair",
								"name": "pair",
								"type": "tuple"
							}
						],
						"internalType": "struct ApeCoinStaking.DashboardStake",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "getBakcStakes",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "poolId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deposited",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unclaimed",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "rewards24hr",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "mainTokenId",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "mainTypePoolId",
										"type": "uint256"
									}
								],
								"internalType": "struct ApeCoinStaking.DashboardPair",
								"name": "pair",
								"type": "tuple"
							}
						],
						"internalType": "struct ApeCoinStaking.DashboardStake[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "getBaycStakes",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "poolId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deposited",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unclaimed",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "rewards24hr",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "mainTokenId",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "mainTypePoolId",
										"type": "uint256"
									}
								],
								"internalType": "struct ApeCoinStaking.DashboardPair",
								"name": "pair",
								"type": "tuple"
							}
						],
						"internalType": "struct ApeCoinStaking.DashboardStake[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "getMaycStakes",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "poolId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deposited",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unclaimed",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "rewards24hr",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "mainTokenId",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "mainTypePoolId",
										"type": "uint256"
									}
								],
								"internalType": "struct ApeCoinStaking.DashboardPair",
								"name": "pair",
								"type": "tuple"
							}
						],
						"internalType": "struct ApeCoinStaking.DashboardStake[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPoolsUI",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "poolId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "stakedAmount",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "uint48",
										"name": "startTimestampHour",
										"type": "uint48"
									},
									{
										"internalType": "uint48",
										"name": "endTimestampHour",
										"type": "uint48"
									},
									{
										"internalType": "uint96",
										"name": "rewardsPerHour",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "capPerPosition",
										"type": "uint96"
									}
								],
								"internalType": "struct ApeCoinStaking.TimeRange",
								"name": "currentTimeRange",
								"type": "tuple"
							}
						],
						"internalType": "struct ApeCoinStaking.PoolUI",
						"name": "",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "poolId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "stakedAmount",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "uint48",
										"name": "startTimestampHour",
										"type": "uint48"
									},
									{
										"internalType": "uint48",
										"name": "endTimestampHour",
										"type": "uint48"
									},
									{
										"internalType": "uint96",
										"name": "rewardsPerHour",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "capPerPosition",
										"type": "uint96"
									}
								],
								"internalType": "struct ApeCoinStaking.TimeRange",
								"name": "currentTimeRange",
								"type": "tuple"
							}
						],
						"internalType": "struct ApeCoinStaking.PoolUI",
						"name": "",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "poolId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "stakedAmount",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "uint48",
										"name": "startTimestampHour",
										"type": "uint48"
									},
									{
										"internalType": "uint48",
										"name": "endTimestampHour",
										"type": "uint48"
									},
									{
										"internalType": "uint96",
										"name": "rewardsPerHour",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "capPerPosition",
										"type": "uint96"
									}
								],
								"internalType": "struct ApeCoinStaking.TimeRange",
								"name": "currentTimeRange",
								"type": "tuple"
							}
						],
						"internalType": "struct ApeCoinStaking.PoolUI",
						"name": "",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "poolId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "stakedAmount",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "uint48",
										"name": "startTimestampHour",
										"type": "uint48"
									},
									{
										"internalType": "uint48",
										"name": "endTimestampHour",
										"type": "uint48"
									},
									{
										"internalType": "uint96",
										"name": "rewardsPerHour",
										"type": "uint96"
									},
									{
										"internalType": "uint96",
										"name": "capPerPosition",
										"type": "uint96"
									}
								],
								"internalType": "struct ApeCoinStaking.TimeRange",
								"name": "currentTimeRange",
								"type": "tuple"
							}
						],
						"internalType": "struct ApeCoinStaking.PoolUI",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "getSplitStakes",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "poolId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deposited",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unclaimed",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "rewards24hr",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "mainTokenId",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "mainTypePoolId",
										"type": "uint256"
									}
								],
								"internalType": "struct ApeCoinStaking.DashboardPair",
								"name": "pair",
								"type": "tuple"
							}
						],
						"internalType": "struct ApeCoinStaking.DashboardStake[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "getTimeRangeBy",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint48",
								"name": "startTimestampHour",
								"type": "uint48"
							},
							{
								"internalType": "uint48",
								"name": "endTimestampHour",
								"type": "uint48"
							},
							{
								"internalType": "uint96",
								"name": "rewardsPerHour",
								"type": "uint96"
							},
							{
								"internalType": "uint96",
								"name": "capPerPosition",
								"type": "uint96"
							}
						],
						"internalType": "struct ApeCoinStaking.TimeRange",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "mainToBakc",
				"outputs": [
					{
						"internalType": "uint248",
						"name": "tokenId",
						"type": "uint248"
					},
					{
						"internalType": "bool",
						"name": "isPaired",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "nftContracts",
				"outputs": [
					{
						"internalType": "contract ERC721Enumerable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "nftPosition",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "stakedAmount",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "rewardsDebt",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "pendingRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "pools",
				"outputs": [
					{
						"internalType": "uint48",
						"name": "lastRewardedTimestampHour",
						"type": "uint48"
					},
					{
						"internalType": "uint16",
						"name": "lastRewardsRangeIndex",
						"type": "uint16"
					},
					{
						"internalType": "uint96",
						"name": "stakedAmount",
						"type": "uint96"
					},
					{
						"internalType": "uint96",
						"name": "accumulatedRewardsPerShare",
						"type": "uint96"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					}
				],
				"name": "removeLastTimeRange",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_from",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_to",
						"type": "uint256"
					}
				],
				"name": "rewardsBy",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "stakedTotal",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					}
				],
				"name": "updatePool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "withdrawApeCoin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "mainTokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "bakcTokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint184",
								"name": "amount",
								"type": "uint184"
							},
							{
								"internalType": "bool",
								"name": "isUncommit",
								"type": "bool"
							}
						],
						"internalType": "struct ApeCoinStaking.PairNftWithdrawWithAmount[]",
						"name": "_baycPairs",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "mainTokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "bakcTokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint184",
								"name": "amount",
								"type": "uint184"
							},
							{
								"internalType": "bool",
								"name": "isUncommit",
								"type": "bool"
							}
						],
						"internalType": "struct ApeCoinStaking.PairNftWithdrawWithAmount[]",
						"name": "_maycPairs",
						"type": "tuple[]"
					}
				],
				"name": "withdrawBAKC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "tokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint224",
								"name": "amount",
								"type": "uint224"
							}
						],
						"internalType": "struct ApeCoinStaking.SingleNft[]",
						"name": "_nfts",
						"type": "tuple[]"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "withdrawBAYC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "tokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint224",
								"name": "amount",
								"type": "uint224"
							}
						],
						"internalType": "struct ApeCoinStaking.SingleNft[]",
						"name": "_nfts",
						"type": "tuple[]"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "withdrawMAYC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawSelfApeCoin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "tokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint224",
								"name": "amount",
								"type": "uint224"
							}
						],
						"internalType": "struct ApeCoinStaking.SingleNft[]",
						"name": "_nfts",
						"type": "tuple[]"
					}
				],
				"name": "withdrawSelfBAYC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint32",
								"name": "tokenId",
								"type": "uint32"
							},
							{
								"internalType": "uint224",
								"name": "amount",
								"type": "uint224"
							}
						],
						"internalType": "struct ApeCoinStaking.SingleNft[]",
						"name": "_nfts",
						"type": "tuple[]"
					}
				],
				"name": "withdrawSelfMAYC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "HorizenLabs",
			"kind": "dev",
			"methods": {
				"addTimeRange(uint256,uint256,uint256,uint256,uint256)": {
					"details": "In practice one Time Range will represent one quarter (defined by `_startTimestamp`and `_endTimeStamp` as whole hours) where the rewards per hour is constant for a given pool.",
					"params": {
						"_amount": "Total amount of ApeCoin to be distributed over the range",
						"_capPerPosition": "Per position cap amount determined by poolId",
						"_endTimeStamp": "Whole hour timestamp representation",
						"_poolId": "Available pool values 0-3",
						"_startTimestamp": "Whole hour timestamp representation"
					}
				},
				"claimApeCoin(address)": {
					"params": {
						"_recipient": "Address to send claim reward to"
					}
				},
				"claimBAKC((uint128,uint128)[],(uint128,uint128)[],address)": {
					"params": {
						"_baycPairs": "Array of Paired BAYC NFTs owned and committed by the msg.sender",
						"_maycPairs": "Array of Paired MAYC NFTs owned and committed by the msg.sender",
						"_recipient": "Address to send claim reward to"
					}
				},
				"claimBAYC(uint256[],address)": {
					"params": {
						"_nfts": "Array of NFTs owned and committed by the msg.sender",
						"_recipient": "Address to send claim reward to"
					}
				},
				"claimMAYC(uint256[],address)": {
					"params": {
						"_nfts": "Array of NFTs owned and committed by the msg.sender",
						"_recipient": "Address to send claim reward to"
					}
				},
				"claimSelfBAKC((uint128,uint128)[],(uint128,uint128)[])": {
					"params": {
						"_baycPairs": "Array of Paired BAYC NFTs owned and committed by the msg.sender",
						"_maycPairs": "Array of Paired MAYC NFTs owned and committed by the msg.sender"
					}
				},
				"claimSelfBAYC(uint256[])": {
					"params": {
						"_nfts": "Array of NFTs owned and committed by the msg.sender"
					}
				},
				"claimSelfMAYC(uint256[])": {
					"params": {
						"_nfts": "Array of NFTs owned and committed by the msg.sender"
					}
				},
				"constructor": {
					"params": {
						"_apeCoinContractAddress": "The ApeCoin ERC20 contract address",
						"_bakcContractAddress": "The BAKC NFT contract address",
						"_baycContractAddress": "The BAYC NFT contract address",
						"_maycContractAddress": "The MAYC NFT contract address"
					}
				},
				"depositApeCoin(uint256,address)": {
					"details": "ApeCoin deposit must be >= 1 ApeCoin",
					"params": {
						"_amount": "Amount in ApeCoin",
						"_recipient": "Address the deposit it stored to"
					}
				},
				"depositBAKC((uint32,uint32,uint184)[],(uint32,uint32,uint184)[])": {
					"details": "Commits 1 or more Pairs, each with an ApeCoin amount to the Pair pool.\\ Each BAKC committed must attach an ApeCoin amount >= 1 ApeCoin and <= the Pair pool cap amount.\\ Example 1: BAYC + BAKC + 1 ApeCoin:  [[0, 0, \"1000000000000000000\"],[]]\\ Example 2: MAYC + BAKC + 1 ApeCoin:  [[], [0, 0, \"1000000000000000000\"]]\\ Example 3: (BAYC + BAKC + 1 ApeCoin) and (MAYC + BAKC + 1 ApeCoin): [[0, 0, \"1000000000000000000\"], [0, 1, \"1000000000000000000\"]]",
					"params": {
						"_baycPairs": "Array of PairNftDepositWithAmount structs",
						"_maycPairs": "Array of PairNftDepositWithAmount structs"
					}
				},
				"depositBAYC((uint32,uint224)[])": {
					"details": "Commits 1 or more BAYC NFTs, each with an ApeCoin amount to the BAYC pool.\\ Each BAYC committed must attach an ApeCoin amount >= 1 ApeCoin and <= the BAYC pool cap amount.",
					"params": {
						"_nfts": "Array of SingleNft structs"
					}
				},
				"depositMAYC((uint32,uint224)[])": {
					"details": "Commits 1 or more MAYC NFTs, each with an ApeCoin amount to the MAYC pool.\\ Each MAYC committed must attach an ApeCoin amount >= 1 ApeCoin and <= the MAYC pool cap amount.",
					"params": {
						"_nfts": "Array of SingleNft structs"
					}
				},
				"depositSelfApeCoin(uint256)": {
					"details": "Deposit on behalf of msg.sender. ApeCoin deposit must be >= 1 ApeCoin",
					"params": {
						"_amount": "Amount in ApeCoin"
					}
				},
				"getAllStakes(address)": {
					"params": {
						"_address": "An Ethereum address"
					},
					"returns": {
						"_0": "dashboardStakes An array of DashboardStake structs"
					}
				},
				"getApeCoinStake(address)": {
					"params": {
						"_address": "An Ethereum address"
					},
					"returns": {
						"_0": "dashboardStake A dashboardStake struct"
					}
				},
				"getBakcStakes(address)": {
					"returns": {
						"_0": "dashboardStakes An array of DashboardStake structs"
					}
				},
				"getBaycStakes(address)": {
					"returns": {
						"_0": "dashboardStakes An array of DashboardStake structs"
					}
				},
				"getMaycStakes(address)": {
					"returns": {
						"_0": "dashboardStakes An array of DashboardStake structs"
					}
				},
				"getPoolsUI()": {
					"returns": {
						"_0": "PoolUI for ApeCoin.",
						"_1": "PoolUI for BAYC.",
						"_2": "PoolUI for MAYC.",
						"_3": "PoolUI for BAKC."
					}
				},
				"getSplitStakes(address)": {
					"params": {
						"_address": "An Ethereum address"
					},
					"returns": {
						"_0": "dashboardStakes An array of DashboardStake structs"
					}
				},
				"getTimeRangeBy(uint256,uint256)": {
					"params": {
						"_index": "Target index in a Pool's timeRanges array",
						"_poolId": "Available pool values 0-3"
					},
					"returns": {
						"_0": "TimeRange A Pool's timeRanges struct by index."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pendingRewards(uint256,address,uint256)": {
					"params": {
						"_address": "Address to lookup Position for",
						"_poolId": "Available pool values 0-3",
						"_tokenId": "An NFT id"
					},
					"returns": {
						"_0": "uint256 value of pending rewards"
					}
				},
				"removeLastTimeRange(uint256)": {
					"params": {
						"_poolId": "Available pool values 0-3"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"rewardsBy(uint256,uint256,uint256)": {
					"params": {
						"_from": "Whole hour timestamp representation",
						"_poolId": "Available pool values 0-3",
						"_to": "Whole hour timestamp representation"
					},
					"returns": {
						"_0": "uint256 The amount of ApeCoin rewards to be distributed by pool for a given time range",
						"_1": "uint256 The amount of time ranges"
					}
				},
				"stakedTotal(address)": {
					"params": {
						"_address": "An Ethereum address"
					},
					"returns": {
						"_0": "amount uint256 staked amount for all pools."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updatePool(uint256)": {
					"params": {
						"_poolId": "Available pool values 0-3"
					}
				},
				"withdrawApeCoin(uint256,address)": {
					"params": {
						"_amount": "Amount of ApeCoin",
						"_recipient": "Address to send withdraw amount and claim to"
					}
				},
				"withdrawBAKC((uint32,uint32,uint184,bool)[],(uint32,uint32,uint184,bool)[])": {
					"details": "if pairs have split ownership and BAKC is attempting a withdraw, the withdraw must be for the total staked amount",
					"params": {
						"_baycPairs": "Array of Paired BAYC NFT's with staked amounts and isUncommit boolean",
						"_maycPairs": "Array of Paired MAYC NFT's with staked amounts and isUncommit boolean"
					}
				},
				"withdrawBAYC((uint32,uint224)[],address)": {
					"params": {
						"_nfts": "Array of BAYC NFT's with staked amounts",
						"_recipient": "Address to send withdraw amount and claim to"
					}
				},
				"withdrawMAYC((uint32,uint224)[],address)": {
					"params": {
						"_nfts": "Array of MAYC NFT's with staked amounts",
						"_recipient": "Address to send withdraw amount and claim to"
					}
				},
				"withdrawSelfApeCoin(uint256)": {
					"params": {
						"_amount": "Amount of ApeCoin"
					}
				},
				"withdrawSelfBAYC((uint32,uint224)[])": {
					"params": {
						"_nfts": "Array of BAYC NFT's with staked amounts"
					}
				},
				"withdrawSelfMAYC((uint32,uint224)[])": {
					"params": {
						"_nfts": "Array of MAYC NFT's with staked amounts"
					}
				}
			},
			"stateVariables": {
				"NULL_PAIR": {
					"details": "Placeholder for pair status, used by ApeCoin Pool"
				},
				"bakcToMain": {
					"details": "bakc Token ID => main type pool ID: 1: BAYC 2: MAYC => main token ID"
				},
				"mainToBakc": {
					"details": "main type pool ID: 1: BAYC 2: MAYC => main token ID => bakc token ID"
				},
				"nftContracts": {
					"details": "NFT contract mapping per pool"
				},
				"nftPosition": {
					"details": "poolId => tokenId => nft position"
				}
			},
			"title": "ApeCoin Staking Contract",
			"version": 1
		},
		"userdoc": {
			"events": {
				"UpdatePool(uint256,uint256,uint256,uint256)": {
					"notice": "Custom Events "
				}
			},
			"kind": "user",
			"methods": {
				"addTimeRange(uint256,uint256,uint256,uint256,uint256)": {
					"notice": "Add single time range with a given rewards per hour for a given pool"
				},
				"apeCoin()": {
					"notice": "Internal ApeCoin amount for distributing staking reward claims"
				},
				"claimApeCoin(address)": {
					"notice": "Claim rewards for msg.sender and send to recipient"
				},
				"claimBAKC((uint128,uint128)[],(uint128,uint128)[],address)": {
					"notice": "Claim rewards for array of Paired NFTs and send to recipient"
				},
				"claimBAYC(uint256[],address)": {
					"notice": "Claim rewards for array of BAYC NFTs and send to recipient"
				},
				"claimMAYC(uint256[],address)": {
					"notice": "Claim rewards for array of MAYC NFTs and send to recipient"
				},
				"claimSelfApeCoin()": {
					"notice": "Claim and send rewards"
				},
				"claimSelfBAKC((uint128,uint128)[],(uint128,uint128)[])": {
					"notice": "Claim rewards for array of Paired NFTs"
				},
				"claimSelfBAYC(uint256[])": {
					"notice": "Claim rewards for array of BAYC NFTs"
				},
				"claimSelfMAYC(uint256[])": {
					"notice": "Claim rewards for array of MAYC NFTs"
				},
				"constructor": {
					"notice": "Construct a new ApeCoinStaking instance"
				},
				"depositApeCoin(uint256,address)": {
					"notice": "Deposit ApeCoin to the ApeCoin Pool"
				},
				"depositBAKC((uint32,uint32,uint184)[],(uint32,uint32,uint184)[])": {
					"notice": "Deposit ApeCoin to the Pair Pool, where Pair = (BAYC + BAKC) or (MAYC + BAKC)"
				},
				"depositBAYC((uint32,uint224)[])": {
					"notice": "Deposit ApeCoin to the BAYC Pool"
				},
				"depositMAYC((uint32,uint224)[])": {
					"notice": "Deposit ApeCoin to the MAYC Pool"
				},
				"depositSelfApeCoin(uint256)": {
					"notice": "Deposit ApeCoin to the ApeCoin Pool"
				},
				"getAllStakes(address)": {
					"notice": "Fetches a DashboardStake = [poolId, tokenId, deposited, unclaimed, rewards24Hrs, paired] \\ for each pool, for an Ethereum address"
				},
				"getApeCoinStake(address)": {
					"notice": "Fetches a DashboardStake for the ApeCoin pool"
				},
				"getBakcStakes(address)": {
					"notice": "Fetches an array of DashboardStakes for the BAKC pool"
				},
				"getBaycStakes(address)": {
					"notice": "Fetches an array of DashboardStakes for the BAYC pool"
				},
				"getMaycStakes(address)": {
					"notice": "Fetches an array of DashboardStakes for the MAYC pool"
				},
				"getPoolsUI()": {
					"notice": "Fetches a PoolUI struct (poolId, stakedAmount, currentTimeRange) for each reward pool"
				},
				"getSplitStakes(address)": {
					"notice": "Fetches an array of DashboardStakes for the Pair Pool when ownership is split \\ ie (BAYC/MAYC) and BAKC in pair pool have different owners."
				},
				"getTimeRangeBy(uint256,uint256)": {
					"notice": "Lookup method for a TimeRange struct"
				},
				"pendingRewards(uint256,address,uint256)": {
					"notice": "Fetches the current amount of claimable ApeCoin rewards for a given position from a given pool."
				},
				"removeLastTimeRange(uint256)": {
					"notice": "Removes the last Time Range for a given pool."
				},
				"rewardsBy(uint256,uint256,uint256)": {
					"notice": "Lookup available rewards for a pool over a given time range"
				},
				"stakedTotal(address)": {
					"notice": "Fetches an address total staked amount, used by voting contract"
				},
				"updatePool(uint256)": {
					"notice": "Updates reward variables `lastRewardedTimestampHour`, `accumulatedRewardsPerShare` and `lastRewardsRangeIndex` for a given pool."
				},
				"withdrawApeCoin(uint256,address)": {
					"notice": "Withdraw staked ApeCoin from the ApeCoin pool.  Performs an automatic claim as part of the withdraw process."
				},
				"withdrawBAKC((uint32,uint32,uint184,bool)[],(uint32,uint32,uint184,bool)[])": {
					"notice": "Withdraw staked ApeCoin from the Pair pool.  If withdraw is total staked amount, performs an automatic claim."
				},
				"withdrawBAYC((uint32,uint224)[],address)": {
					"notice": "Withdraw staked ApeCoin from the BAYC pool.  If withdraw is total staked amount, performs an automatic claim."
				},
				"withdrawMAYC((uint32,uint224)[],address)": {
					"notice": "Withdraw staked ApeCoin from the MAYC pool.  If withdraw is total staked amount, performs an automatic claim."
				},
				"withdrawSelfApeCoin(uint256)": {
					"notice": "Withdraw staked ApeCoin from the ApeCoin pool.  If withdraw is total staked amount, performs an automatic claim."
				},
				"withdrawSelfBAYC((uint32,uint224)[])": {
					"notice": "Withdraw staked ApeCoin from the BAYC pool.  If withdraw is total staked amount, performs an automatic claim."
				},
				"withdrawSelfMAYC((uint32,uint224)[])": {
					"notice": "Withdraw staked ApeCoin from the MAYC pool.  If withdraw is total staked amount, performs an automatic claim."
				}
			},
			"notice": "Stake ApeCoin across four different pools that release hourly rewards",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Subject/ApeCoinStake.sol": "ApeCoinStaking"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
			"license": "MIT",
			"urls": [
				"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
				"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
				"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
			]
		},
		"@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118",
			"license": "MIT",
			"urls": [
				"bzz-raw://ef0fb6e809779426dc2ac201149bbad4aecdc5810874f2843b050e8b5fef8d30",
				"dweb:/ipfs/QmPDRjaNxmcyxLUKvv8Fxk5eWcf7xvC5S9JpbtqvE7Cadu"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68",
			"license": "MIT",
			"urls": [
				"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56",
				"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
				"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
			"keccak256": "0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3",
			"license": "MIT",
			"urls": [
				"bzz-raw://63a5e0bb5a7d182e0d0eef87033f78115eab791de3626a929bc98c157087880a",
				"dweb:/ipfs/QmetkXAu2CJKS4qrZtEQPU8okAPwUwa6HL4XYwk8vrYMk8"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
			"keccak256": "0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf",
			"license": "MIT",
			"urls": [
				"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34",
				"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
				"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
				"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a",
			"license": "MIT",
			"urls": [
				"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634",
				"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b",
				"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad",
			"license": "MIT",
			"urls": [
				"bzz-raw://495145362c7ff1c9ca88c58bbbbcb412e3c2004406647412394486552ff6c278",
				"dweb:/ipfs/QmNNCeng6d5eRPDn6tkWSQhjE39XWfQEfjA63rRwHmr1iH"
			]
		},
		"Subject/ApeCoinStake.sol": {
			"keccak256": "0xfdd977922b413784761b74848657d66f071a0e12377bddf6bb90f837d9e39f80",
			"license": "MIT",
			"urls": [
				"bzz-raw://57fc351c6b7ec310d50a2424bd21b2abc55854ea271c7086af11b652d6d43563",
				"dweb:/ipfs/QmPc97XV5Shwt4UtzHBQojPTfwu6cBBjfyfNWt8w1sW6ny"
			]
		}
	},
	"version": 1
}